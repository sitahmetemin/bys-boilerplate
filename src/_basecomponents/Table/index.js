import React, {Component} from 'react';import _ from 'lodash'import uuidv4 from 'uuid/v4'import TooltipModal from "../Tooltip";import './style.css'export default class Table extends Component {    constructor(props) {        super(props);        this.state = {            data: this.props.data        }    }    handleChange = (e) => {        let {data} = this.state,            val = _.trim(e.target.value),            keys = Object.keys(this.state.data[0]);        this.setState({            filter: val ? true : false,            tempData: val ? data.filter(a => {                return _.includes(a[keys[1]].toLowerCase(), val.toLowerCase())            }) : data        })    }    componentWillReceiveProps(nextProps) {        if(!_.isEqual(nextProps.data,this.props.data)) {            const {data} = nextProps;            this.setState({                data: data            })        }    }    renderTh() {        const {children} = this.props;        if (children && _.isArray(children)) {            return children.map(function (colData, i) {                return <th key={'headTh_' + i}> {colData.props.children} </th>;            })        } else {            return <th key={uuidv4()}>{children.props.children}</th>        }    }    iconTh() {        const {iconList} = this.props;        if (iconList && !_.isEmpty(iconList)) {            return iconList.map(function (icon, i) {                return <th className='header-icon' key={'icon_' + i} style={{width: 50}}></th>;            })        }        return null    }    handleClick(val, type) {        const {onClick} = this.props;        onClick && this.props.onClick(val, type)    }    iconList(item, iconPosition) {        const {iconList} = this.props;        if (iconList && !_.isEmpty(iconList)) {            return iconList.map((icon, i)=> {                let iconRender;                if (icon.toolTip && !_.isEmpty(icon.toolTip)) {                    iconRender = <TooltipModal key={'icon_list_' + i} id="popover-trigger-hover-focus" position={iconPosition === 'left' ? 'right' : 'left'} text={icon.toolTip} title="" type="tooltip" >                        <td key={'icon_list_' + i} className={`is-icon ${icon.noClick ? 'no-click' : ''}`} onClick={() => !icon.noClick ? this.handleClick(item, icon.type) : {}} >                            <i className={`fal fa-${icon.icon}`} ></i>                        </td>                    </TooltipModal>                } else {                    iconRender = <td key={'icon_list_' + i} className={`is-icon ${icon.noClick ? 'no-click' : ''}`} >                        <i className={`fal fa-${icon.icon}`} onClick={() => icon.noClick ? this.handleClick(item, icon.type) : {}}></i>                    </td>                }                return iconRender            })        } else {            return null        }    }    generateHeaders() {        const {iconPosition} = this.props;        return <tr>            {iconPosition === 'left' && this.iconTh()}            {this.renderTh()}            {iconPosition === 'right' && this.iconTh()}        </tr>;    }    generateRows() {        const {children, iconPosition, clickRow} = this.props;        let {data, tempData, filter} = this.state,            cells;        data = filter ? tempData : data;        return data.map((item, index) => {            if (children && !!children.length) {                cells = children.map((colData, i) => {                    let width = {width: colData.props.width ? colData.props.width : {}},                        textAlign = {textAlign: colData.props.textAlign ? colData.props.textAlign : {}},                        fontWeight = {fontWeight: colData.props.bold ? 'bold' : {}}                    return <td key={'t_' + i} style={{...width, ...textAlign, ...fontWeight}} onClick={() => clickRow ? this.handleClick(item, null) : {}} >                        {_.get(item, String(colData.props.dataField))}                    </td>                })            } else if (children && !children.length && _.isObject(children)) {                cells = <td key={'t_' + index} onClick={() => clickRow ? this.handleClick(item, null) : {}} >                    {item[children.props.dataField]}                </td>            }            return <tr className={clickRow ? 'row-hover' : ''} key={uuidv4()} >                {iconPosition === 'left' && this.iconList(item)}                {cells}                {iconPosition === 'right' && this.iconList(item)}            </tr>        });    }    renderSearch() {        if (this.props.search) {            return <div className="search">                <input type="text" onChange={(val) => {this.handleChange(val)}} />                <i className={`fal fa-search`} ></i>            </div>        }    }    headIconList(val) {        if (val && !_.isEmpty(val) && val.length) {            return val.map((item, i) => {                return <TooltipModal key={'icon_list_head_' + i} id="popover-trigger-hover-focus" position={'bottom'} text={item.toolTip} title="" type="tooltip" >                    <li>                        <i className={`cover-bg-icon fal fa-${item.icon}`} ></i>                    </li>                </TooltipModal>            })        }    }    renderHeadIcon() {        const {headIconList} = this.props;        if (headIconList && !_.isEmpty(headIconList)) {            return <div className="icon-list">                <ul>                    {this.headIconList(headIconList)}                </ul>            </div>        }    }    render() {        let headerComponents = this.generateHeaders(),            rowComponents = this.generateRows();        return (            <div className="app-table">                <table className={`table table-bordered ${this.props.customClass}`}>                    <caption className="text-center">                        {this.renderSearch()}                        {this.renderHeadIcon()}                    </caption>                    <thead>{headerComponents}</thead>                    <tbody>{rowComponents}</tbody>                </table>            </div>        );    }}