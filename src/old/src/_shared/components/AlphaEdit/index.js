import React, {Component} from 'react';import _ from 'lodash';import is from 'is_js';import './style.css'import classNames from 'classnames'export default class AlphaEdit extends Component {    constructor(props) {        super(props);        const {addonSelected, value} = this.props;        this.state = {            ...this.props,            value: addonSelected && !_.isEmpty(addonSelected) ? {                value: _.trim(value),                selected: addonSelected            } : _.trim(value)        }    }    componentWillReceiveProps(nextProps) {        const {addonSelected, value} = nextProps;        if (nextProps.value !== this.props.value) {            this.setState({                ...nextProps,                value: addonSelected && !_.isEmpty(addonSelected) ? {                    value: value,                    selected: addonSelected                } : value            })        }        if (nextProps !== this.props) {            this.setState({                ...nextProps,                value: addonSelected && !_.isEmpty(addonSelected) ? {                    value: value,                    selected: addonSelected                } : value            })        }    }    handleChange = (e) => {        const {onChange} = this.props;        let val = e.target.value;        this.setState({            ...this.state,            value: this.state.addonSelect ? {value: _.trim(val), selected: this.state.addonSelected} : _.trim(val)        }, () => {            onChange && this.props.onChange(this.state.value)        })    }    handleBlur = (e) => {        const {onBlur} = this.props;        let val = e.target.value;        this.setState({            ...this.state,            value: this.state.addonSelect ? {value: _.trim(val), selected: this.state.addonSelected} : _.trim(val)        }, () => {            onBlur && this.props.onBlur(this.state.value)        })    }    title() {        let {title, id} = this.state;        if (title && !_.isEmpty(title)) {            return <div className="alpha-title" id={"alpha_title_" + id}>{title}</div>        }        return null    }    label() {        let {caption, id} = this.state;        if (caption && !_.isEmpty(caption)) {            return <label className="placeholder-label" id={"alpha_label_" + id}>{caption}</label>        }        return null    }    helperIconClick() {        let {helperIconClick} = this.state;        helperIconClick && this.props.helperIconClick()    }    helperIcon() {        let {helperIcon, helperIconClick, id} = this.state;        if (helperIcon && !_.isEmpty(helperIcon) && helperIconClick) {            return <i className="material-icons helper-icon-alphaedit" id={"helper_icon_" + id} onClick={()=> this.helperIconClick()}>                {helperIcon}            </i>        }        return null    }    addon(val) {        const {addon, id} = this.state;        if (val && _.find(addon, {position: val})) {            return <span className={'input-group-addon ' + val}                         id={"ariaFirst" + id}>{_.find(addon, {position: val}).text}</span>        }        return ''    }    addonSelect() {        let {addonSelect, addonSelected, displayLabel} = this.state;        let _this = this;        if (addonSelect && is.array(addonSelect) && !_.isEmpty(addonSelect)) {            return <div className="input-group-btn">                <button type="button" className="btn btn-default dropdown-toggle" data-toggle="dropdown"                        aria-haspopup="true" aria-expanded="false">                    {addonSelected[displayLabel]}                    <span className="caret"></span>                </button>                <ul className="dropdown-menu dropdown-menu-right dropdown-select">                    {                        addonSelect.map(function (item, i) {                            return (                                <li                                    className="only-li no-icon"                                    key={i}                                    onClick={() => _this.handleAddonSelect(item)}                                >                                    {item[displayLabel]}                                </li>                            )                        })                    }                </ul>            </div>        }        return ''    };    handleAddonSelect(val) {        const {onChange} = this.props;        let inputValue = this.state.value.selected && !_.isEmpty(this.state.value.selected) ? this.state.value.value : !_.trim(this.state.value);        this.setState({            addonSelected: val,            value: {value: inputValue, select: val}        }, () => {            onChange && this.props.onChange(this.state.value)        })    }    error() {        let {errorMessage, id} = this.state;        if (errorMessage && !_.isEmpty(errorMessage)) {            return <div className="alpha-error-container" id={"alpha_error_" + id}>{errorMessage}</div>        }        return null    }    focus = () => {        this.state.ref && this[this.state.ref] && this[this.state.ref].focus();    }    render() {        console.log('Select', this.state)        let {readOnly, id, name, type, disabled, minChar, maxChar, value, addon, errorMessage} = this.state,            igClass = classNames('input-group', {                'data-active': value && value.selected && !_.isEmpty(value.selected) ? value.value && !_.isEmpty(value.value) : !_.isEmpty(value),                'addon-left': _.find(addon, {position: 'left'}) && !_.isEmpty(_.find(addon, {position: 'left'})),                'addon-right': _.find(addon, {position: 'right'}) && !_.isEmpty(_.find(addon, {position: 'right'})),                'error': errorMessage && !_.isEmpty(errorMessage)            });        return (            <div className="alpha-edit">                {this.title()}                <div className="alpha-container">                    <div className={igClass}>                        {this.addon('left')}                        <fieldset>                            <input                                id={id}                                type={type}                                name={name}                                disabled={disabled}                                readOnly={readOnly}                                defaultValue={this.state.addonSelect ? this.state.value.value : this.state.value}                                className="digi-alpha-input"                                minLength={minChar}                                maxLength={maxChar}                                onChange={(val) => {                                    this.handleChange(val)                                }}                                onClick={this.focus}                                onBlur={(val) => {                                    this.handleBlur(val)                                }}                                tabIndex={this.state.tabIndex}                                ref={ref => this[this.state.ref] = ref}                            />                            {this.label()}                        </fieldset>                        {this.helperIcon()}                        {this.addon('right')}                        {this.addonSelect()}                        {this.error()}                    </div>                </div>            </div>        );    }}