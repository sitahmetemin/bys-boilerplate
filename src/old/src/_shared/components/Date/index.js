import React, {Component} from 'react';import DatePicker from 'react-datepicker';import moment from 'moment';import _ from 'lodash'import {convertDateDotToMinus} from "../../functions";import 'react-datepicker/dist/react-datepicker.css';import './style.css'import classNames from "classnames";export default class Date extends Component {    constructor(props) {        super(props);        const {            dateFormat,            selectDate,            minDate,            maxDate,            excludeDates,            includeDates,            highlightDates,            excludeWeekend,            disabled,            autoFocus,            caption,            errorMessage,            tabIndex,        } = this.props;        let exDates = [],            incDates = [],            highDates = [];        if (excludeDates && !_.isEmpty(excludeDates)) {            excludeDates.forEach(date => {                exDates.push(moment(convertDateDotToMinus(date)))            })        }        if (includeDates && !_.isEmpty(includeDates)) {            includeDates.forEach(item => {                incDates.push(moment(convertDateDotToMinus(item)))            })        }        if (highlightDates && !_.isEmpty(highlightDates)) {            highlightDates.forEach(item => {                highDates.push(moment(convertDateDotToMinus(item)))            })        }        this.state = {            dateFormat: dateFormat,            selected: moment(convertDateDotToMinus(selectDate)),            minDate: minDate && moment(convertDateDotToMinus(minDate)),            maxDate: maxDate && moment(convertDateDotToMinus(maxDate)),            excludeDates: excludeDates && exDates,            includeDates: includeDates && incDates,            highlightDates:highlightDates && highDates,            filterDate:excludeWeekend ? this.isWeekday : null,            disabled: disabled,            autoFocus:autoFocus,            todayButton: "Bugünün tarihine git",            caption:caption,            errorMessage: errorMessage,            tabIndex: tabIndex,            focus: false        }    }    handleChange = (date) => {        const {onChange} = this.props;        this.setState({            selected: date        },()=> {            onChange && this.props.onChange(moment(this.state.selected).format('L'))        });    }    isWeekday = date => {        const day = date.day();        return day !== 0 && day !== 6;    }    error() {        let {errorMessage, id} = this.state;        if (errorMessage && !_.isEmpty(errorMessage)) {            return <div className="date-error-container" id={"date_error_" + id}>{errorMessage}</div>        }        return null    }    focus = () => {        this.state.ref && this[this.state.ref] && this[this.state.ref].focus();        this.setState({            focus: true        })    }    blur = () => {        this.setState({            focus: false        })    }    label() {        let {caption, id} = this.state;        if (caption && !_.isEmpty(caption)) {            return <label className="placeholder-label" id={"date_label_" + id}>{caption}</label>        }        return null    }    render() {        console.log('State--',this.state)        let {selected, errorMessage, focus} = this.state,            dTClass = classNames('digi-date', {                'data-active': selected && !_.isEmpty(selected) ? true : false,                'focus': focus,                'error': errorMessage && !_.isEmpty(errorMessage)            });        return (            <div className={dTClass}                 onClick={this.focus}                 onBlur={this.blur}            >                <i className="material-icons">date_range</i>                <DatePicker                    {...this.state}                    onChange={this.handleChange}                    tabIndex={this.state.tabIndex}                />                {this.label()}                {this.error()}            </div>        );    }}